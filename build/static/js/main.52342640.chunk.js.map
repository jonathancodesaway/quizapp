{"version":3,"sources":["components/presentational/Question.jsx","components/presentational/Quiz.jsx","components/presentational/Footer.jsx","components/container/VisibleQuiz.jsx","App.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","question","answers","map","answer","type","name","Component","Quiz","quizTitle","quizQuestionsAndAnswers","qAndA","components_presentational_Question","resultRender","quizResult","Footer","VisibleQuiz","connect","quizID","quizResults","dispatch","submitAnswers","result","App","container_VisibleQuiz","components_presentational_Footer","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","action","assign","console","log","getState","rootElement","document","getElementById","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA8BiBA,2BAzBf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHIP,wEASjB,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZR,KAAKJ,MAAMa,SACXT,KAAKJ,MAAMc,QAAQC,IAAK,SAASC,GAC9B,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZI,EAAO,GACRP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,QAAQC,KAAK,iBANnC,YAZiBC,cC2BNC,qBArBf,SAAAA,IAAc,IAAAnB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACZnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,QAEKI,MAAQ,GAHDP,wEASZ,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKP,KAAKJ,MAAMqB,WACfjB,KAAKJ,MAAMsB,wBAAwBP,IAAK,SAASQ,GAC9C,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CAAUX,SAAUU,EAAM,GAAIT,QAASS,EAAM,OAH1D,IAKGnB,KAAKJ,MAAMyB,aAAehB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUR,KAAKJ,MAAM0B,YAAoB,aApBxEP,cCOFQ,0LANX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,oBAHaO,qBCsBNS,EAFKC,YAjBI,SAACrB,GACrB,MAAO,CACHa,UAAWb,EAAMa,UACjBS,OAAQtB,EAAMsB,OACdR,wBAAyBd,EAAMc,wBAC/BG,aAAcjB,EAAMiB,aACpBM,YAAavB,EAAMuB,cAKA,SAACC,GACxB,MAAO,CACHC,cAAe,SAACC,GAAaF,EAAS,CAACf,KAAM,SAAUc,YAAaG,OAIxDL,CAA6CT,GCNlDe,mLAVX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,YACAH,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,cANUlB,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECNAC,EAAe,CACjBtB,UAAW,iCACXS,OAAQ,EACRR,wBAAyB,GACzBG,cAAc,EACdC,WAAY,ICdVkB,EAAQC,YDkBC,WAAkC,IAAjCrC,EAAiCsC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,OAAQC,EAAOhC,MACX,IAAK,SACD,OAAOf,OAAOgD,OAAO,GAAI1C,EAAO,CAC5BkB,WAAYuB,EAAOvB,aAE3B,QACI,OAAOlB,KCvBnB2C,QAAQC,IAAIR,EAAMS,YAEHT,QCCTU,EAAcC,SAASC,eAAe,QAExCC,IAASC,OACLjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAUf,MAAOA,GACbnC,EAAAC,EAAAC,cAACiD,EAAD,OAEJN,GHmHF,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52342640.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Question.css';\n\nclass Question extends Component {\n   \n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"question\">\n        {this.props.question} \n        {this.props.answers.map( function(answer) {\n            return (\n              <div className=\"answer\">\n                {answer[0]}\n                <input type=\"radio\" name=\"selection\"></input>\n              </div>\n            );\n        })};\n      </div>\n    );\n  }\n}\n  \n  export default Question;","import React, { Component } from 'react';\nimport Question from '../presentational/Question';\nimport './Quiz.css';\n\nclass Quiz extends Component {\n    \n  //Quiz component calculates userResult and upon submit\n  //finds final answer in quizResults array and shows\n  //user their result\n  constructor() {\n    super();\n\n    this.state = {\n      //quizQuestionsAndAnswers: [ [\"question1\", [[\"yes\",0], [\"no\", 1]] ] ]\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"quiz\">\n        <h1>{this.props.quizTitle}</h1>\n        {this.props.quizQuestionsAndAnswers.map( function(qAndA) { \n            return <Question question={qAndA[0]} answers={qAndA[1]}/> \n        })};\n        {this.props.resultRender ? <div className=\"result\">{this.props.quizResult}</div> : null }\n      </div>\n    );\n  }\n}\n  \n  export default Quiz;","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n    render() {\n      return (\n        <div className=\"footer\">&copy; 2019</div>\n      );\n    }\n  }\n  \n  export default Footer;","// import React, { Component } from 'react';\nimport '../../App.css';\nimport Quiz from '../presentational/Quiz'\nimport { connect } from 'react-redux';\n\n/* grab things from state*/\nconst mapStateToProps = (state) => {\n    return {\n        quizTitle: state.quizTitle,\n        quizID: state.quizID,\n        quizQuestionsAndAnswers: state.quizQuestionsAndAnswers,\n        resultRender: state.resultRender,\n        quizResults: state.quizResults\n    } \n}\n\n/* grab creators */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        submitAnswers: (result) => { dispatch({type: \"SUBMIT\", quizResults: result}) }\n    } \n}  \n\nconst VisibleQuiz = connect(mapStateToProps, mapDispatchToProps)(Quiz)\n\nexport default VisibleQuiz;","import React, { Component } from 'react';\nimport './App.css';\nimport { VisibleQuiz } from './components';\nimport { Footer } from './components';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Quiz App</header>\n        <VisibleQuiz />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//action types\nexport const SUBMIT = \"SUBMIT\";\n\n//action creators\nexport const submitAnswers = (text) => {\n    return {\n        type: \"SUBMIT\",\n        quizResult: text\n    }\n}\n\n//initialize state with this variable in reducer\nconst initialState = {\n    quizTitle: \"Which Disney princess are you?\",\n    quizID: 1,\n    quizQuestionsAndAnswers: [],\n    resultRender: false,\n    quizResult: 55\n}\n\n//reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'SUBMIT':\n            return Object.assign({}, state, {\n                quizResult: action.quizResult\n            })\n        default:\n            return state;\n    }\n}","import { createStore } from 'redux';\nimport { default as reducer } from './reducer';\n\nconst store = createStore(reducer);\n\nconsole.log(store.getState());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { default as store } from './store';\n\nconst rootElement = document.getElementById('root')\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        rootElement\n    );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}